<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://ofbiz.apache.org/Simple-Method" xsi:schemaLocation="http://ofbiz.apache.org/Simple-Method http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="approveSupplier" short-description="Approve Supplier">
        <entity-and entity-name="UserLogin" list="getSupplierUserLogin">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-and>
        <set field="supplierUserLogin" from-field="getSupplierUserLogin[0].userLoginId"/>
        <entity-and entity-name="UserLoginAndSecurityGroup" list="checkSupplierGroups" filter-by-date="true">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
            <field-map field-name="groupId" value="MYPORTAL_SUPPLIER"/>
        </entity-and>
        <if-empty field="checkSupplierGroups">
            <clear-field field="addUserLoginToSecurityGroupCtx"/>
            <set field="addUserLoginToSecurityGroupCtx.userLoginId" from-field="supplierUserLogin"/>
            <set field="addUserLoginToSecurityGroupCtx.groupId" value="MYPORTAL_SUPPLIER"/>
            <set field="addUserLoginToSecurityGroupCtx.userLogin" from-field="parameters.userLogin"/>
            <call-service service-name="addUserLoginToSecurityGroup" in-map-name="addUserLoginToSecurityGroupCtx"/>

            <clear-field field="getPartyNameForDateMap"/>
            <set field="getPartyNameForDateMap.partyId" from-field="parameters.partyId"/>
            <set field="getPartyNameForDateMap.userLogin" from-field="parameters.userLogin"/>
            <call-service service-name="getPartyNameForDate" in-map-name="getPartyNameForDateMap">
                <result-to-field result-name="groupName" field="groupName"/>
                <result-to-field result-name="firstName" field="firstName"/>
                <result-to-field result-name="lastName" field="lastName"/>
            </call-service>
            <if-not-empty field="groupName">
                <set field="supplierName" from-field="groupName"/>
                <else>
                    <set field="supplierName" value="${firstName} ${lastName}"/>
                </else>
            </if-not-empty>
            <!-- Set email body parameters -->
            <set field="bodyParameters.supplierName" from-field="supplierName"/>
            <set field="bodyParameters.webSiteId" from-field="parameters.webSiteId"/>

            <!-- Send mail approve -->
            <clear-field field="sendMailMap"/>
            <set field="sendMailMap.webSiteId" from-field="parameters.webSiteId"/>
            <set field="sendMailMap.partyIdTo" from-field="parameters.partyId"/>
            <set field="sendMailMap.emailTemplateSettingId" value="SUPPLIER_APPROVE"/>
            <set field="sendMailMap.bodyParameters" from-field="bodyParameters"/>
            <call-service service-name="sendMailFromTemplateSetting" in-map-name="sendMailMap"/>
        </if-empty>
    </simple-method>

    <simple-method method-name="rejectSupplier" short-description="Reject Supplier">
        <now-timestamp field="nowTimestamp"/>

        <clear-field field="getPartyNameForDateMap"/>
        <set field="getPartyNameForDateMap.partyId" from-field="parameters.partyId"/>
        <set field="getPartyNameForDateMap.userLogin" from-field="parameters.userLogin"/>
        <call-service service-name="getPartyNameForDate" in-map-name="getPartyNameForDateMap">
            <result-to-field result-name="groupName" field="groupName"/>
            <result-to-field result-name="firstName" field="firstName"/>
            <result-to-field result-name="lastName" field="lastName"/>
        </call-service>
        <if-not-empty field="groupName">
            <set field="supplierName" from-field="groupName"/>
            <else>
                <set field="supplierName" value="${firstName} ${lastName}"/>
            </else>
        </if-not-empty>
        <!-- Set email body parameters -->
        <set field="bodyParameters.supplierName" from-field="supplierName"/>
        <set field="bodyParameters.webSiteId" from-field="parameters.webSiteId"/>
        <set field="bodyParameters.partyId" from-field="parameters.partyId"/>
        <set field="bodyParameters.reason" from-field="parameters.reason"/>
        <!-- Send mail reject -->
        <clear-field field="sendMailMap"/>
        <set field="sendMailMap.webSiteId" from-field="parameters.webSiteId"/>
        <set field="sendMailMap.partyIdTo" from-field="parameters.partyId"/>
        <set field="sendMailMap.emailTemplateSettingId" value="SUPPLIER_REJECTED"/>
        <set field="sendMailMap.bodyParameters" from-field="bodyParameters"/>
        <call-service service-name="sendMailFromTemplateSetting" in-map-name="sendMailMap"/>

        <!-- Disable party -->
        <!-- <clear-field field="setPartyStatusMap"/>
        <set field="setPartyStatusMap.partyId" from-field="parameters.partyId"/>
        <set field="setPartyStatusMap.statusId" value="PARTY_DISABLED"/>
        <call-service service-name="setPartyStatus" in-map-name="setPartyStatusMap"/> -->

        <!-- Expire email -->
        <!-- <entity-and entity-name="PartyContactMech" list="partyContactMechList" filter-by-date="true">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-and>
        <if-not-empty field="partyContactMechList">
            <iterate list="partyContactMechList" entry="partyContactMech">
                <set field="partyContactMech.thruDate" from-field="nowTimestamp"/>
            </iterate>
            <store-list list="partyContactMechList"/>
        </if-not-empty>
        <entity-and entity-name="PartyContactMechPurpose" list="partyContactMechPurposeList" filter-by-date="true">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-and>
        <if-not-empty field="partyContactMechPurposeList">
            <iterate list="partyContactMechPurposeList" entry="partyContactMechPurpose">
                <set field="partyContactMechPurpose.thruDate" from-field="nowTimestamp"/>
            </iterate>
            <store-list list="partyContactMechPurposeList"/>
        </if-not-empty> -->

        <!-- Expire user login -->
        <!-- <entity-and entity-name="UserLogin" list="userLoginList">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-and>
        <if-not-empty field="userLoginList">
            <iterate list="userLoginList" entry="userLogin">
                <set field="userLogin.enabled" value="N"/>
            </iterate>
            <store-list list="userLoginList"/>
        </if-not-empty> -->

        <clear-field field="createPartyNoteMap"/>
        <set field="createPartyNoteMap.partyId" from-field="parameters.partyId"/>
        <set field="createPartyNoteMap.noteName" value="Reject Reason"/>
        <set field="createPartyNoteMap.note" from-field="parameters.reason"/>
        <set field="createPartyNoteMap.userLogin" from-field="parameters.userLogin"/>
        <call-service service-name="createPartyNote" in-map-name="createPartyNoteMap"/>

        <entity-and entity-name="PartyContent" list="idNumberList" filter-by-date="true">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
            <field-map field-name="partyContentTypeId" value="INTERNAL"/>
        </entity-and>
        <if-not-empty field="idNumberList">
            <iterate entry="idNumber" list="idNumberList">
                <set field="idNumber.thruDate" from-field="nowTimestamp"/>
            </iterate>
            <store-list list="idNumberList"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="getVerifyTemplate" short-description="Get verify template">
        <set field="redirectLink" value="success"/>
        <!-- Check supplier redirect link -->
        <entity-one entity-name="PartyRole" value-field="partyRoleSupplier">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
            <field-map field-name="roleTypeId" value="SUPPLIER"/>
        </entity-one>
        <if-not-empty field="partyRoleSupplier">
            <set field="redirectLink" value="verify"/>
        </if-not-empty>

        <field-to-result field="parameters.partyId" result-name="partyId"/>
        <field-to-result field="redirectLink" result-name="redirectLink"/>
    </simple-method>

    <simple-method method-name="checkShippingAddress" short-description="Check Shipping Address">
        <if-empty field="parameters.shipping_contact_mech_id">
            <set-service-fields service-name="createPostalAddressAndPurposes" map="parameters" to-map="shipAddressMap"/>
            <set field="shipAddressMap.contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
            <call-service service-name="createPostalAddressAndPurposes" in-map-name="shipAddressMap">
                <result-to-field result-name="contactMechId" field="parameters.shipping_contact_mech_id"/>
            </call-service>
            <else>
                <!-- Get general address -->
                <clear-field field="generalMap"/>
                <set field="generalMap.partyId" from-field="parameters.partyId"/>
                <set field="generalMap.contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
                <call-service service-name="getPartyPostalAddress" in-map-name="generalMap">
                    <result-to-field result-name="contactMechId" field="generalContactMechId"/>
                </call-service>

                <entity-and entity-name="PartyContactMechPurpose" list="pcmpList" filter-by-date="true">
                    <field-map field-name="contactMechId" from-field="parameters.shipping_contact_mech_id"/>
                    <field-map field-name="contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
                </entity-and>
                <if-not-empty field="pcmpList">
                    <entity-and entity-name="PartyAndPostalAddress" list="shipAddrList" filter-by-date="true">
                        <field-map field-name="contactMechId" from-field="parameters.shipping_contact_mech_id"/>
                        <field-map field-name="partyId" from-field="parameters.partyId"/>
                        <field-map field-name="contactMechTypeId" value="POSTAL_ADDRESS"/>
                    </entity-and>
                    <first-from-list entry="shipAddr" list="shipAddrList"/>
                    <first-from-list entry="pcmp" list="pcmpList"/>
                    <if>
                        <condition>
                            <or>
                                <if-compare-field field="parameters.toName" operator="not-equals" to-field="shipAddr.toName"/>
                                <if-compare-field field="parameters.address1" operator="not-equals" to-field="shipAddr.address1"/>
                                <if-compare-field field="parameters.city" operator="not-equals" to-field="shipAddr.city"/>
                                <if-compare-field field="parameters.postalCode" operator="not-equals" to-field="shipAddr.postalCode"/>
                                <if-compare-field field="parameters.countryGeoId" operator="not-equals" to-field="shipAddr.countryGeoId"/>
                                <if-compare-field field="parameters.stateProvinceGeoId" operator="not-equals" to-field="shipAddr.stateProvinceGeoId"/>
                            </or>
                        </condition>
                        <then>
                            <if-compare-field field="pcmp.contactMechId" operator="equals" to-field="generalContactMechId">
                                <!-- Expire old shipping address -->
                                <clear-field field="serviceInMap"/>
                                <set-service-fields service-name="deletePartyContactMechPurposeIfExists" map="pcmp" to-map="serviceInMap"/>
                                <call-service service-name="deletePartyContactMechPurposeIfExists" in-map-name="serviceInMap"/>
                                <!-- Create new shipping address -->
                                <set-service-fields service-name="createPartyPostalAddress" map="parameters" to-map="createPartyPostalAddressMap"/>
                                <call-service service-name="createPartyPostalAddress" in-map-name="createPartyPostalAddressMap" >
                                    <result-to-field result-name="contactMechId" field="parameters.shipping_contact_mech_id"/>
                                </call-service>
                                <set-service-fields service-name="createPartyContactMechPurpose" map="parameters" to-map="serviceContext"/>
                                <set field="serviceContext.contactMechId" from-field="parameters.shipping_contact_mech_id"/>
                                <set field="serviceContext.contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
                                <call-service service-name="createPartyContactMechPurpose" in-map-name="serviceContext"/>
                                <else>
                                    <!-- Update shipping address -->
                                    <set-service-fields service-name="updatePartyPostalAddress" map="parameters" to-map="updatePartyPostalAddressMap"/>
                                    <set field="updatePartyPostalAddressMap.contactMechId" from-field="parameters.shipping_contact_mech_id"/>
                                    <call-service service-name="updatePartyPostalAddress" in-map-name="updatePartyPostalAddressMap">
                                        <result-to-field result-name="contactMechId" field="parameters.shipping_contact_mech_id"/>
                                    </call-service>
                                </else>
                            </if-compare-field>
                        </then>
                    </if>
                </if-not-empty>
            </else>
        </if-empty>

        <field-to-result field="parameters.partyId" result-name="partyId"/>
        <field-to-result field="parameters.shipping_contact_mech_id" result-name="shipping_contact_mech_id"/>
    </simple-method>

    <simple-method method-name="createPFTShippingAddress" short-description="Create Shipping Address">
        <call-service service-name="createPartyPostalAddress" in-map-name="parameters">
            <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
        </call-service>
        <set from-field="parameters.partyId" field="addressPurposeContext.partyId"/>
        <!-- create the shipping location -->
        <set value="SHIPPING_LOCATION" field="addressPurposeContext.contactMechPurposeTypeId"/>
        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
        <!-- also consider this address the general correspondence address -->
        <set value="GENERAL_LOCATION" field="addressPurposeContext.contactMechPurposeTypeId"/>
        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
    </simple-method>

    <simple-method method-name="updateSupplierInfo" short-description="Update Supplier Information">
        <set-service-fields service-name="updatePartyGroup" map="parameters" to-map="updatePartyGroupMap"/>
        <call-service service-name="updatePartyGroup" in-map-name="updatePartyGroupMap"/>

        <property-to-field resource="ProductFromThailandUiLabels" property="PFTCompanyUpdateSuccessful" field="successMessage"/>
        <field-to-result field="parameters.partyId" result-name="partyId"/>
    </simple-method>

    <simple-method method-name="shippedOrder" short-description="Approve purchase order">
        <entity-one entity-name="UserLogin" value-field="systemUserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <entity-and entity-name="OrderItemAssoc" list="orderItemAssocs">
            <field-map field-name="toOrderId" from-field="parameters.orderId"/>
        </entity-and>
        <entity-and entity-name="OrderItemShipGroup" list="shipGroupList">
            <field-map field-name="orderId" from-field="orderItemAssocs[0].orderId"/>
            <field-map field-name="supplierPartyId" from-field="userLogin.partyId"/>
        </entity-and>
        <if-not-empty field="shipGroupList">
           <iterate list="shipGroupList" entry="shipGroup">
              <set-service-fields service-name="updateOrderItemShipGroup" map="shipGroup" to-map="orderItemShipGroupMap"/>
              <set field="orderItemShipGroupMap.trackingNumber" from-field="parameters.trackingNumber"/>
              <call-service service-name="updateOrderItemShipGroup" in-map-name="orderItemShipGroupMap"/>
           </iterate>
        </if-not-empty>

        <set field="changeOrderStatusMap.orderId" from-field="parameters.orderId"/>
        <set field="changeOrderStatusMap.statusId" value="ORDER_APPROVED"/>
        <set field="changeOrderStatusMap.setItemStatus" value="Y"/>
        <set field="changeOrderStatusMap.userLogin" from-field="systemUserLogin"/>
        <call-service service-name="changeOrderStatus" in-map-name="changeOrderStatusMap"/>
    </simple-method>

    <simple-method method-name="quickDropShipOrderPFT" short-description="Update Supplier Information">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set-service-fields service-name="quickDropShipOrder" map="parameters" to-map="quickDropShipOrderMap"/>
        <set field="quickDropShipOrderMap.userLogin" from-field="systemUserLogin"/>
        <call-service service-name="quickDropShipOrder" in-map-name="quickDropShipOrderMap"/>
    </simple-method>

    <simple-method method-name="sendPurchaseOrderConfirmation" short-description="Send Purchase Order Confirmation">
        <entity-one entity-name="UserLogin" value-field="systemUserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <entity-and entity-name="OrderItemAssoc" list="orderItemAssocList">
            <field-map field-name="orderId" from-field="parameters.orderId"/>
        </entity-and>
        <if-not-empty field="orderItemAssocList">
            <iterate list="orderItemAssocList" entry="orderItemAssoc">
                <entity-and entity-name="OrderHeaderAndRoles" list="orderRoles">
                    <field-map field-name="orderId" from-field="orderItemAssoc.toOrderId"/>
                    <field-map field-name="roleTypeId" value="SUPPLIER_AGENT"/>
                </entity-and>
                <if-not-empty field="orderRoles">
                    <first-from-list list="orderRoles" entry="orderRole"/>
                    <entity-and entity-name="WebSite" list="webSites">
                        <field-map field-name="productStoreId" from-field="orderRole.productStoreId"/>
                    </entity-and>
                    <first-from-list list="webSites" entry="webSite"/>
                    <set field="getEmailTo.partyId" from-field="orderRole.partyId"/>
                    <call-service service-name="getPartyEmail" in-map-name="getEmailTo">
                        <result-to-field result-name="emailAddress" field="sendTo"/>
                    </call-service>
                    <entity-one entity-name="ProductStoreEmailSetting" value-field="storeEmail">
                        <field-map field-name="productStoreId" from-field="orderRole.productStoreId"/>
                        <field-map field-name="emailType" value="PRCHS_ODR_CONFIRM"/>
                    </entity-one>
                    <if-not-empty field="storeEmail.bodyScreenLocation">
                        <set field="bodyParameters.orderId" from-field="orderItemAssoc.toOrderId"/>
                        <set field="bodyParameters.partyId" from-field="orderRole.partyId"/>
                        <set field="bodyParameters.userLogin" from-field="systemUserLogin"/>
                        <set field="emailParams.bodyParameters" from-field="bodyParameters"/>
                        <set field="emailParams.sendTo" from-field="sendTo"/>
                        <set field="emailParams.subject" from-field="storeEmail.subject"/>
                        <set field="emailParams.sendFrom" from-field="storeEmail.fromAddress"/>
                        <set field="emailParams.sendCc" from-field="storeEmail.ccAddress"/>
                        <set field="emailParams.sendBcc" from-field="storeEmail.bccAddress"/>
                        <set field="emailParams.bodyScreenUri" from-field="storeEmail.bodyScreenLocation"/>
                        <set field="emailParams.xslfoAttachScreenLocation" from-field="storeEmail.xslfoAttachScreenLocation"/>
                        <set field="emailParams.webSiteId" from-field="webSite.webSiteId"/>
                        <set field="emailParams.userLogin" from-field="systemUserLogin"/>
                        <call-service service-name="sendMailFromScreen" in-map-name="emailParams"/>
                    </if-not-empty>
                </if-not-empty>
            </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="sendOrderCancelNotification" short-description="Send Order Cancel Notification">
        <entity-one entity-name="UserLogin" value-field="systemUserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <entity-and entity-name="OrderHeaderAndRoles" list="orderRoles">
            <field-map field-name="orderId" from-field="parameters.orderId"/>
            <field-map field-name="roleTypeId" value="END_USER_CUSTOMER"/>
        </entity-and>
        <if-not-empty field="orderRoles">
            <first-from-list list="orderRoles" entry="orderRole"/>
            <entity-and entity-name="WebSite" list="webSites">
                <field-map field-name="productStoreId" from-field="orderRole.productStoreId"/>
            </entity-and>
            <first-from-list list="webSites" entry="webSite"/>
            <set field="getEmailTo.partyId" from-field="orderRole.partyId"/>
            <call-service service-name="getPartyEmail" in-map-name="getEmailTo">
                <result-to-field result-name="emailAddress" field="sendTo"/>
            </call-service>
            <entity-one entity-name="ProductStoreEmailSetting" value-field="storeEmail">
                <field-map field-name="productStoreId" from-field="orderRole.productStoreId"/>
                <field-map field-name="emailType" value="PRDS_ODR_CANCEL"/>
            </entity-one>
            <if-not-empty field="storeEmail.bodyScreenLocation">
                <set field="bodyParameters.orderId" from-field="parameters.orderId"/>
                <set field="bodyParameters.partyId" from-field="orderRole.partyId"/>
                <set field="bodyParameters.userLogin" from-field="systemUserLogin"/>
                <set field="emailParams.bodyParameters" from-field="bodyParameters"/>
                <set field="emailParams.sendTo" from-field="sendTo"/>
                <set field="emailParams.subject" from-field="storeEmail.subject"/>
                <set field="emailParams.sendFrom" from-field="storeEmail.fromAddress"/>
                <set field="emailParams.sendCc" from-field="storeEmail.ccAddress"/>
                <set field="emailParams.sendBcc" from-field="storeEmail.bccAddress"/>
                <set field="emailParams.bodyScreenUri" from-field="storeEmail.bodyScreenLocation"/>
                <set field="emailParams.webSiteId" from-field="webSite.webSiteId"/>
                <set field="emailParams.userLogin" from-field="systemUserLogin"/>
                <call-service service-name="sendMailFromScreen" in-map-name="emailParams"/>
            </if-not-empty>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="quickShipEntireOrderPFT" short-description="receive Item Order">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set-service-fields service-name="quickShipEntireOrder" map="parameters" to-map="quickShipEntireOrderMap"/>
        <set field="quickShipEntireOrderMap.userLogin" from-field="systemUserLogin"/>
        <call-service service-name="quickShipEntireOrder" in-map-name="quickShipEntireOrderMap"/>
    </simple-method>

</simple-methods>
