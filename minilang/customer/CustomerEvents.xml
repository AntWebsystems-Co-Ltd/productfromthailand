<?xml version="1.0" encoding="UTF-8" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://ofbiz.apache.org/Simple-Method" xsi:schemaLocation="http://ofbiz.apache.org/Simple-Method http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="createSupplier" short-description="create a customer profile [Supplier]" login-required="false">
        <entity-one entity-name="UserLogin" value-field="systemUserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <call-class-method class-name="org.apache.ofbiz.content.layout.LayoutWorker" method-name="uploadImageAndParameters" ret-field="formInput">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
            <string value="imageFileName"/>
        </call-class-method>
        <call-class-method class-name="org.apache.ofbiz.content.layout.LayoutWorker" method-name="returnByteBuffer" ret-field="byteWrap">
            <field field="formInput" type="java.util.Map"/>
        </call-class-method>
        <if-empty field="formInput.formInput.username">
            <add-error>
                <fail-property resource="PartyUiLabels" property="PartyUserLoginMissingError"/>
            </add-error>
        </if-empty>
        <if-not-empty field="formInput.formInput.password">
            <if-compare-field field="formInput.formInput.password" operator="not-equals" to-field="formInput.formInput.passwordVerify">
                <add-error>
                    <fail-property resource="PartyUiLabels" property="PartyPasswordMatchError"/>
                </add-error>
            </if-compare-field>
            <else>
                <add-error>
                    <fail-property resource="PartyUiLabels" property="PartyPasswordMissing"/>
                </add-error>
            </else>
        </if-not-empty>
        <entity-and list="checkEmailLists" entity-name="PartyContactDetailByPurpose">
            <field-map field-name="contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
            <field-map field-name="contactMechTypeId" value="EMAIL_ADDRESS"/>
            <field-map field-name="infoString" from-field="formInput.formInput.emailAddress"/>
        </entity-and>
        <if-not-empty field="checkEmailLists">
            <add-error>
                <fail-property resource="ProductFromThailandUiLabels" property="PFTEmailAlreadyUsed"/>
            </add-error>
            <check-errors/>
        </if-not-empty>
        <!-- Process all map -->
        <call-map-processor xml-resource="component://party/minilang/contact/PartyContactMechMapProcs.xml"
        processor-name="emailAddress" in-map-name="formInput.formInput" out-map-name="emailAddressCtx"/>
        <call-map-processor in-map-name="formInput.formInput" out-map-name="shipToAddressCtx">
            <simple-map-processor name="shipToAddress">
                <process field="shipToContactMechId"><copy to-field="contactMechId" set-if-null="false"/></process>
                <process field="shipToName"><copy to-field="toName" set-if-null="false"/></process>
                <process field="shipToAttnName"><copy to-field="attnName" set-if-null="false"/></process>
                <process field="shipToAddress1">
                    <copy to-field="address1"/>
                    <not-empty>
                        <fail-property resource="PartyUiLabels" property="PartyAddressLine1MissingError"/>
                    </not-empty>
                </process>
                <process field="shipToAddress2"><copy to-field="address2"/></process>
                <process field="shipToCity">
                    <copy to-field="city"/>
                    <not-empty>
                        <fail-property resource="PartyUiLabels" property="PartyCityMissing"/>
                    </not-empty>
                </process>
                <process field="shipToStateProvinceGeoId"><copy to-field="stateProvinceGeoId"/></process>
                <process field="shipToPostalCode">
                    <copy to-field="postalCode"/>
                    <not-empty>
                        <fail-property resource="PartyUiLabels" property="PartyPostalInformationNotFound"/>
                    </not-empty>
                </process>
                <process field="shipToCountryGeoId">
                    <copy to-field="countryGeoId"/>
                    <not-empty>
                        <fail-property resource="PartyUiLabels" property="PartyCountryMissing"/>
                    </not-empty>
                </process>
            </simple-map-processor>
        </call-map-processor>
        <check-errors/>

        <if-not-empty field="formInput.formInput.groupName">
            <set field="createPartyGroupCtx.groupName" from-field="formInput.formInput.groupName"/>
            <!-- create person -->
            <call-service service-name="createPartyGroup" in-map-name="createPartyGroupCtx">
                <result-to-field result-name="partyId" field="partyId"/>
            </call-service>
            <set field="parameters.partyId" from-field="partyId"/>
            <entity-one entity-name="UserLogin" value-field="parameters.userLogin" auto-field-map="false">
                <field-map field-name="userLoginId" value="system"/>
            </entity-one>
        </if-not-empty>

        <if-not-empty field="formInput.formInput.firstName">
            <!-- create person -->
            <set-service-fields service-name="createPerson" map="formInput.formInput" to-map="newParty"/>
            <call-service service-name="createPerson" in-map-name="newParty">
                <result-to-field result-name="partyId" field="parameters.partyId"/>
            </call-service>
            <set field="parameters.partyId" from-field="partyId"/>
            <entity-one entity-name="UserLogin" value-field="parameters.userLogin" auto-field-map="false">
                <field-map field-name="userLoginId" value="system"/>
            </entity-one>
        </if-not-empty>

        <!-- Create Id card number or passport number -->
        <if-not-empty field="formInput.formInput.idCardNo">
            <entity-one value-field="partyIdentification" entity-name="PartyIdentification">
                <field-map field-name="partyId" from-field="parameters.partyId"/>
                <field-map field-name="partyIdentificationTypeId" value="ID_NUMBER"/>
            </entity-one>
            <if-empty field="partyIdentification">
                <make-value value-field="partyIdentification" entity-name="PartyIdentification"/>
                <set field="partyIdentification.partyId" from-field="parameters.partyId"/>
                <set field="partyIdentification.partyIdentificationTypeId" value="ID_NUMBER"/>
                <set field="partyIdentification.idValue" from-field="formInput.formInput.idCardNo"/>
                <create-value value-field="partyIdentification"/>
                <else>
                    <set field="partyIdentification.idValue" from-field="formInput.formInput.idCardNo"/>
                    <store-value value-field="partyIdentification"/>
                </else>
            </if-empty>
        </if-not-empty>
        <!-- Create a business registration number -->
        <if-not-empty field="formInput.formInput.businessRegistNo">
            <entity-one value-field="partyIdentification" entity-name="PartyIdentification">
                <field-map field-name="partyId" from-field="parameters.partyId"/>
                <field-map field-name="partyIdentificationTypeId" value="ID_BIZ_REGISTER_NO"/>
            </entity-one>
            <if-empty field="partyIdentification">
                <make-value value-field="partyIdentification" entity-name="PartyIdentification"/>
                <set field="partyIdentification.partyId" from-field="parameters.partyId"/>
                <set field="partyIdentification.partyIdentificationTypeId" value="ID_BIZ_REGISTER_NO"/>
                <set field="partyIdentification.idValue" from-field="formInput.formInput.businessRegistNo"/>
                <create-value value-field="partyIdentification"/>
                <else>
                    <set field="partyIdentification.idValue" from-field="formInput.formInput.businessRegistNo"/>
                    <store-value value-field="partyIdentification"/>
                </else>
            </if-empty>
        </if-not-empty>
        <!-- Create party role-->
        <set field="partyRoleContext.partyId" from-field="parameters.partyId"/>
        <set field="partyRoleContext.roleTypeId" from-field="formInput.formInput.roleTypeId"/>
        <set field="partyRoleContext.userLogin" from-field="parameters.userLogin"/>
        <call-service service-name="createPartyRole" in-map-name="partyRoleContext"/>

        <!-- Create supplier type -->
        <set field="supplierRoleContext.partyId" from-field="parameters.partyId"/>
        <set field="supplierRoleContext.roleTypeId" from-field="formInput.formInput.supplierType"/>
        <set field="supplierRoleContext.userLogin" from-field="parameters.userLogin"/>
        <call-service service-name="createPartyRole" in-map-name="supplierRoleContext"/>

        <!-- Create email address -->
        <set field="emailAddressCtx.partyId" from-field="parameters.partyId"/>
        <set field="emailAddressCtx.userLogin" from-field="parameters.userLogin"/>
        <set field="emailAddressCtx.contactMechPurposeTypeId" from-field="formInput.formInput.emailContactMechPurposeTypeId"/>
        <call-service service-name="createPartyEmailAddress" in-map-name="emailAddressCtx">
            <result-to-field result-name="contactMechId" field="emailContactMechId"/>
        </call-service>
        <log level="info" message="Email Contact Created emailContactMechId is ${emailContactMechId}"/>
        <!-- Create the Home Phone -->
        <if-not-empty field="formInput.formInput.SUPPLIER_HOME_CONTACT">
            <call-map-processor in-map-name="formInput.formInput" out-map-name="homePhoneContext">
                <simple-map-processor name="newTelecomNumber">
                    <process field="roleTypeId"><copy/></process>
                    <process field="SUPPLIER_HOME_COUNTRY"><copy to-field="countryCode"/></process>
                    <process field="SUPPLIER_HOME_AREA"><copy to-field="areaCode"/></process>
                    <process field="SUPPLIER_HOME_CONTACT"><copy to-field="contactNumber"/></process>
                    <process field="SUPPLIER_HOME_EXT"><copy to-field="extension"/></process>
                    <process field="SUPPLIER_HOME_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
        </if-not-empty>

        <!-- Create the Work Phone -->
        <if-not-empty field="formInput.formInput.SUPPLIER_WORK_CONTACT">
            <call-map-processor in-map-name="formInput.formInput" out-map-name="workPhoneContext">
                <simple-map-processor name="newTelecomNumber">
                    <process field="roleTypeId"><copy/></process>
                    <process field="SUPPLIER_WORK_COUNTRY"><copy to-field="countryCode"/></process>
                    <process field="SUPPLIER_WORK_AREA"><copy to-field="areaCode"/></process>
                    <process field="SUPPLIER_WORK_CONTACT"><copy to-field="contactNumber"/></process>
                    <process field="SUPPLIER_WORK_EXT"><copy to-field="extension"/></process>
                    <process field="SUPPLIER_WORK_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
        </if-not-empty>

        <!-- Create the Fax Phone -->
        <if-not-empty field="formInput.formInput.SUPPLIER_FAX_CONTACT">
            <call-map-processor in-map-name="formInput.formInput" out-map-name="faxPhoneContext">
                <simple-map-processor name="newTelecomNumber">
                    <process field="roleTypeId"><copy/></process>
                    <process field="SUPPLIER_FAX_COUNTRY"><copy to-field="countryCode"/></process>
                    <process field="SUPPLIER_FAX_AREA"><copy to-field="areaCode"/></process>
                    <process field="SUPPLIER_FAX_CONTACT"><copy to-field="contactNumber"/></process>
                    <process field="SUPPLIER_FAX_EXT"><copy to-field="extension"/></process>
                    <process field="SUPPLIER_FAX_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
        </if-not-empty>

        <!-- Create the Mobile Phone -->
        <if-not-empty field="formInput.formInput.SUPPLIER_MOBILE_CONTACT">
            <call-map-processor in-map-name="formInput.formInput" out-map-name="mobilePhoneContext">
                <simple-map-processor name="newTelecomNumber">
                    <process field="roleTypeId"><copy/></process>
                    <process field="SUPPLIER_MOBILE_COUNTRY"><copy to-field="countryCode"/></process>
                    <process field="SUPPLIER_MOBILE_AREA"><copy to-field="areaCode"/></process>
                    <process field="SUPPLIER_MOBILE_CONTACT"><copy to-field="contactNumber"/></process>
                    <process field="SUPPLIER_MOBILE_EXT"><copy to-field="extension"/></process>
                    <process field="SUPPLIER_MOBILE_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
        </if-not-empty>

        <!-- Check for required Phone -->
        <if-compare field="formInput.formInput.REQUIRE_PHONE" operator="equals" value="true">
            <if-empty field="formInput.formInput.SUPPLIER_HOME_CONTACT">
                <if-empty field="formInput.formInput.SUPPLIER_WORK_CONTACT">
                    <if-empty field="formInput.formInput.SUPPLIER_MOBILE_CONTACT">
                        <call-map-processor in-map-name="formInput.formInput" out-map-name="dummymap">
                            <simple-map-processor name="checkRequiredPhone">
                                <process field="REQUIRED_PHONE">
                                    <not-empty>
                                        <fail-property resource="PartyUiLabels" property="PartyContactTelephoneMissingError"/></not-empty>
                                </process>
                            </simple-map-processor>
                        </call-map-processor>
                    </if-empty>
                </if-empty>
            </if-empty>
        </if-compare>

        <set from-field="parameters.partyId" field="homePhoneContext.partyId"/>
        <set from-field="parameters.userLogin" field="homePhoneContext.userLogin"/>
        <set from-field="parameters.partyId" field="workPhoneContext.partyId"/>
        <set from-field="parameters.userLogin" field="workPhoneContext.userLogin"/>
        <set from-field="parameters.partyId" field="faxPhoneContext.partyId"/>
        <set from-field="parameters.userLogin" field="faxPhoneContext.userLogin"/>
        <set from-field="parameters.partyId" field="mobilePhoneContext.partyId"/>
        <set from-field="parameters.userLogin" field="mobilePhoneContext.userLogin"/>

        <!-- home phone -->
        <if-not-empty field="formInput.formInput.SUPPLIER_HOME_CONTACT">
            <call-service service-name="createPartyTelecomNumber" in-map-name="homePhoneContext">
                <result-to-field result-name="contactMechId" field="homePhonePurposeContext.contactMechId"/>
            </call-service>
            <set from-field="parameters.partyId" field="homePhonePurposeContext.partyId"/>
            <set from-field="parameters.userLogin" field="homePhonePurposeContext.userLogin"/>
            <set value="PHONE_HOME" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
            <set value="PRIMARY_PHONE" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
        </if-not-empty>

        <!-- work phone -->
        <if-not-empty field="formInput.formInput.SUPPLIER_WORK_CONTACT">
            <call-service service-name="createPartyTelecomNumber" in-map-name="workPhoneContext">
                <result-to-field result-name="contactMechId" field="workPhonePurposeContext.contactMechId"/>
            </call-service>
            <set from-field="parameters.partyId" field="workPhonePurposeContext.partyId"/>
            <set from-field="parameters.userLogin" field="workPhonePurposeContext.userLogin"/>
            <set value="PHONE_WORK" field="workPhonePurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="workPhonePurposeContext"/>
        </if-not-empty>

        <!-- fax phone -->
        <if-not-empty field="formInput.formInput.SUPPLIER_FAX_CONTACT">
            <call-service service-name="createPartyTelecomNumber" in-map-name="faxPhoneContext">
                <result-to-field result-name="contactMechId" field="faxPhonePurposeContext.contactMechId"/>
            </call-service>
            <set from-field="parameters.partyId" field="faxPhonePurposeContext.partyId"/>
            <set from-field="parameters.userLogin" field="faxPhonePurposeContext.userLogin"/>
            <set value="FAX_NUMBER" field="faxPhonePurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="faxPhonePurposeContext"/>
        </if-not-empty>

        <!-- mobile phone -->
        <if-not-empty field="formInput.formInput.SUPPLIER_MOBILE_CONTACT">
            <call-service service-name="createPartyTelecomNumber" in-map-name="mobilePhoneContext">
                <result-to-field result-name="contactMechId" field="mobilePhonePurposeContext.contactMechId"/>
            </call-service>
            <set from-field="parameters.partyId" field="mobilePhonePurposeContext.partyId"/>
            <set from-field="parameters.userLogin" field="mobilePhonePurposeContext.userLogin"/>
            <set value="PHONE_MOBILE" field="mobilePhonePurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="mobilePhonePurposeContext"/>
        </if-not-empty>
        <!-- create userLogin -->
        <set field="parameters.username" from-field="formInput.formInput.username"/>
        <set field="parameters.password" from-field="formInput.formInput.password"/>
        <set field="parameters.passwordVerify" from-field="formInput.formInput.passwordVerify"/>
        <call-simple-method method-name="createUpdateUserLogin" xml-resource="component://ecommerce/minilang/customer/CustomerEvents.xml"/>
        <!-- Create shipping address -->
        <set field="shipToAddressCtx.partyId" from-field="parameters.partyId"/>
        <set field="shipToAddressCtx.userLogin" from-field="parameters.userLogin"/>
        <set field="shipToAddressCtx.setPaymentPurpose" value="Y"/>
        <set field="shipToAddressCtx.setGeneralPurpose" value="Y"/>
        <set field="shipToAddressCtx.productStoreId" from-field="formInput.formInput.productStoreId"/>
        <set field="shipToAddressCtx.setBillingPurpose" value="Y"/>
        <call-service service-name="createSupplierPostalAddressAndPurposes" in-map-name="shipToAddressCtx">
            <result-to-field result-name="contactMechId" field="billToContactMechId"/>
        </call-service>
        <log level="info" message="Billing address created with contactMechId ${billToContactMechId}"/>
        <!-- Create new content form upload file -->
        <set-service-fields service-name="createContentFromUploadedFile" map="formInput.formInput" to-map="inMap"/>
        <set field="inMap._uploadedFile_fileName" from-field="formInput.imageFileName"/>
        <set field="inMap.uploadedFile" from-field="formInput.imageData"/>
        <set field="inMap._uploadedFile_contentType" from-field="formInput.uploadMimeType"/>
        <set field="inMap.mimeTypeId" from-field="formInput.uploadMimeType"/>
        <set field="inMap.userLogin" from-field="systemUserLogin"/>
        <call-service service-name="createContentFromUploadedFile" in-map-name="inMap">
            <result-to-field result-name="contentId" field="contentId"/>
        </call-service>
        <!-- Create party content -->
        <set field="partyContent.partyId" from-field="parameters.partyId"/>
        <set field="partyContent.contentId" from-field="contentId"/>
        <set field="partyContent.partyContentTypeId" value="INTERNAL"/>
        <set field="partyContent.fromDate" from-field="nowTimestamp"/>
        <set field="partyContent.userLogin" from-field="systemUserLogin"/>
        <call-service service-name="createPartyContent" in-map-name="partyContent"/>
        <!-- Create email notification -->
        <set field="parameters.emailAddress" from-field="formInput.formInput.emailAddress"/>
        <set field="parameters.groupName" from-field="formInput.formInput.groupName"/>
        <set field="parameters.firstName" from-field="formInput.formInput.firstName"/>
        <set field="parameters.lastName" from-field="formInput.formInput.lastName"/>
        <call-simple-method method-name="sendCreatePartyGroupEmailNotification"/>
    </simple-method>

    <simple-method method-name="createSupplierPostalAddressAndPurposes" short-description="Create postal address, purposes and set them defaults" login-required="false">
        <call-service service-name="createPartyPostalAddress" in-map-name="parameters" >
            <result-to-field result-name="contactMechId" field="parameters.contactMechId"/>
            <result-to-result result-name="contactMechId"/>
        </call-service>
        <if>
            <condition>
                <or>
                    <not><if-empty field="parameters.setGeneralPurpose"/></not>
                    <not><if-empty field="parameters.setBillingPurpose"/></not>
                    <not><if-empty field="parameters.setPaymentPurpose"/></not>
                </or>
            </condition>
            <then>
                <set-service-fields service-name="createPartyContactMechPurpose" map="parameters" to-map="serviceContext"/>
                <set field="serviceContext.partyId" from-field="userLogin.partyId"/>
                <if-compare field="parameters.setGeneralPurpose" operator="equals" value="Y">
                    <entity-and entity-name="PartyContactMechPurpose" list="pcmpList" filter-by-date="true">
                        <field-map field-name="partyId" from-field="userLogin.partyId"/>
                        <field-map field-name="contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
                    </entity-and>
                    <if-not-empty field="pcmpList">
                        <first-from-list entry="pcmp" list="pcmpList"/>
                        <set-service-fields service-name="deletePartyContactMechPurposeIfExists" map="pcmp" to-map="serviceInMap"/>
                        <call-service service-name="deletePartyContactMechPurposeIfExists" in-map-name="serviceInMap"/>
                        <clear-field field="serviceInMap"/>
                    </if-not-empty>
                    <set field="serviceContext.contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="serviceContext"/>

                    <set-service-fields service-name="setPartyProfileDefaults" map="parameters" to-map="partyProfileDefaultsCtx"/>
                    <set field="partyProfileDefaultsCtx.defaultShipAddr" from-field="parameters.contactMechId"/>
                    <set field="partyProfileDefaultsCtx.partyId" from-field="userLogin.partyId"/>
                    <call-service service-name="setPartyProfileDefaults" in-map-name="partyProfileDefaultsCtx"/>
                </if-compare>
                <if-compare field="parameters.setBillingPurpose" operator="equals" value="Y">
                    <entity-and entity-name="PartyContactMechPurpose" list="pcmpList" filter-by-date="true">
                        <field-map field-name="partyId" from-field="userLogin.partyId"/>
                        <field-map field-name="contactMechPurposeTypeId" value="BILLING_LOCATION"/>
                    </entity-and>
                    <if-not-empty field="pcmpList">
                        <first-from-list entry="pcmp" list="pcmpList"/>
                        <set-service-fields service-name="deletePartyContactMechPurposeIfExists" map="pcmp" to-map="serviceInMap"/>
                        <call-service service-name="deletePartyContactMechPurposeIfExists" in-map-name="serviceInMap"/>
                    </if-not-empty>
                    <set field="serviceContext.contactMechPurposeTypeId" value="BILLING_LOCATION"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="serviceContext"/>

                    <set-service-fields service-name="setPartyProfileDefaults" map="parameters" to-map="partyProfileDefaultsCtx"/>
                    <set field="partyProfileDefaultsCtx.defaultBillAddr" from-field="parameters.contactMechId"/>
                    <set field="partyProfileDefaultsCtx.partyId" from-field="userLogin.partyId"/>
                    <call-service service-name="setPartyProfileDefaults" in-map-name="partyProfileDefaultsCtx"/>
                </if-compare>
                <if-compare field="parameters.setPaymentPurpose" operator="equals" value="Y">
                    <entity-and entity-name="PartyContactMechPurpose" list="pcmpList" filter-by-date="true">
                        <field-map field-name="partyId" from-field="userLogin.partyId"/>
                        <field-map field-name="contactMechPurposeTypeId" value="PAYMENT_LOCATION"/>
                    </entity-and>
                    <if-not-empty field="pcmpList">
                        <first-from-list entry="pcmp" list="pcmpList"/>
                        <set-service-fields service-name="deletePartyContactMechPurposeIfExists" map="pcmp" to-map="serviceInMap"/>
                        <call-service service-name="deletePartyContactMechPurposeIfExists" in-map-name="serviceInMap"/>
                    </if-not-empty>
                    <set field="serviceContext.contactMechPurposeTypeId" value="PAYMENT_LOCATION"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="serviceContext"/>

                    <set-service-fields service-name="setPartyProfileDefaults" map="parameters" to-map="partyProfileDefaultsCtx"/>
                    <set field="partyProfileDefaultsCtx.defaultBillAddr" from-field="parameters.contactMechId"/>
                    <set field="partyProfileDefaultsCtx.partyId" from-field="userLogin.partyId"/>
                    <call-service service-name="setPartyProfileDefaults" in-map-name="partyProfileDefaultsCtx"/>
                </if-compare>
            </then>
        </if>
    </simple-method>

    <!-- send party group creation email notification -->
    <simple-method method-name="sendCreatePartyGroupEmailNotification" short-description="Notification email on party group creation" login-required="false">
        <map-to-map map="parameters" to-map="bodyParameters"/>
        <set field="emailType" value="PARTYGRP_REGISTER"/>
        <entity-condition entity-name="ProductStoreEmailSetting" list="productStoreEmailSettings">
            <condition-list>
                <condition-expr field-name="emailType" operator="equals" from-field="emailType"/>
            </condition-list>
        </entity-condition>
        <first-from-list entry="storeEmail" list="productStoreEmailSettings"/>
        <entity-and list="webSites" entity-name="WebSite">
            <field-map field-name="productStoreId" from-field="storeEmail.productStoreId"/>
        </entity-and>
        <first-from-list entry="webSite" list="webSites"/>
        <if-not-empty field="storeEmail.bodyScreenLocation">
            <entity-one entity-name="PartyGroup" value-field="partyGroup"/>
            <set field="bodyParameters.partyGroup" from-field="partyGroup"/>
            <set field="emailParams.bodyParameters" from-field="bodyParameters"/>
            <set field="emailParams.sendTo" from-field="parameters.emailAddress"/>
            <set field="emailParams.subject" from-field="storeEmail.subject"/>
            <set field="emailParams.sendFrom" from-field="storeEmail.fromAddress"/>
            <set field="emailParams.sendCc" from-field="storeEmail.ccAddress"/>
            <set field="emailParams.sendBcc" from-field="storeEmail.bccAddress"/>
            <set field="emailParams.contentType" from-field="storeEmail.contentType"/>
            <set field="emailParams.bodyScreenUri" from-field="storeEmail.bodyScreenLocation"/>
            <set field="emailParams.webSiteId" from-field="webSite.webSiteId"/>
            <set field="emailParams.emailType" from-field="emailType"/>
            <call-service service-name="sendMailFromScreen" in-map-name="emailParams"/>
        </if-not-empty>
    </simple-method>

     <simple-method method-name="createCustomer" short-description="Create Customer" login-required="false">
        <entity-and list="checkEmailLists" entity-name="PartyContactDetailByPurpose">
            <field-map field-name="contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
            <field-map field-name="contactMechTypeId" value="EMAIL_ADDRESS"/>
            <field-map field-name="infoString" from-field="parameters.CUSTOMER_EMAIL"/>
        </entity-and>
        <if-not-empty field="checkEmailLists">
            <add-error>
                <fail-property resource="ProductFromThailandUiLabels" property="PFTEmailAlreadyUsed"/>
            </add-error>
            <check-errors/>
        </if-not-empty>

        <call-class-method class-name="org.apache.ofbiz.product.store.ProductStoreWorker" method-name="getProductStore" ret-field="productStore">
            <field field="request" type="javax.servlet.ServletRequest"/>
        </call-class-method>

        <set from-field="productStore.allowPassword" field="allowPassword"/>
        <set from-field="productStore.defaultPassword" field="defaultPassword"/>
        <if-empty field="allowPassword">
            <set field="allowPassword" value="Y"/>
        </if-empty>
        <if-empty field="defaultPassword">
            <set field="defaultPassword" value="ungssblepswd"/>
        </if-empty>

        <property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
        <property-to-field resource="security" property="password.lowercase" default="false" field="password_lowercase"/>

        <now-timestamp field="nowStamp"/>
        <set value="CUSTOMER" field="parameters.roleTypeId"/>

        <if-compare field="allowPassword" operator="not-equals" value="Y">
            <set from-field="defaultPassword" field="parameters.PASSWORD"/>
            <set from-field="defaultPassword" field="parameters.CONFIRM_PASSWORD"/>
            <set value="No hint set, account not yet enabled" field="parameters.PASSWORD_HINT"/>
        </if-compare>

        <if-compare field="productStore.usePrimaryEmailUsername" operator="equals" value="Y">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
        </if-compare>

        <!-- if username and/or password should be lowercased, do that now -->
        <if-compare field="username_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.USERNAME" method-name="toLowerCase" ret-field="parameters.USERNAME"/>
        </if-compare>
        <if-compare field="password_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.PASSWORD" method-name="toLowerCase" ret-field="parameters.PASSWORD"/>
            <call-object-method obj-field="parameters.CONFIRM_PASSWORD" method-name="toLowerCase" ret-field="parameters.CONFIRM_PASSWORD"/>
        </if-compare>

        <!-- Create the UserLogin Record -->
        <call-map-processor in-map-name="parameters" out-map-name="userLoginContext">
            <simple-map-processor name="newUserLogin">
                <process field="USERNAME"><copy to-field="userLoginId"/><not-empty><fail-property resource="PartyUiLabels" property="PartyUserLoginMissingError"/></not-empty></process>
                <process field="PASSWORD"><copy to-field="currentPassword"/><not-empty><fail-property resource="PartyUiLabels" property="PartyPasswordMissing"/></not-empty></process>
                <process field="CONFIRM_PASSWORD">
                    <compare-field operator="equals" field="PASSWORD"><fail-property resource="PartyUiLabels" property="PartyPasswordMatchError"/></compare-field>
                    <copy to-field="currentPasswordVerify"/>
                </process>
                <process field="PASSWORD_HINT"><copy to-field="passwordHint"/></process>
            </simple-map-processor>
        </call-map-processor>
        <if-not-empty field="userLoginContext.userLoginId">
            <set from-field="userLoginContext.userLoginId" field="userLoginExistsMap.userLoginId"/>
            <find-by-primary-key entity-name="UserLogin" map="userLoginExistsMap" value-field="existingUserLogin"/>
            <if-not-empty field="existingUserLogin">
                <property-to-field field="tempErrorMessage" resource="PartyUiLabels" property="PartyUserNameInUse"/>
                <string-to-list string="${tempErrorMessage}" message-field="USERNAME" list="error_list"/>
            </if-not-empty>
        </if-not-empty>

        <make-value entity-name="UserLogin" value-field="newUserLogin"/>
        <set from-field="userLoginContext.userLoginId" field="newUserLogin.userLoginId"/>
        <set from-field="userLoginContext.currentPassword" field="newUserLogin.currentPassword"/>
        <set from-field="userLoginContext.passwordHint" field="newUserLogin.passwordHint"/>

        <!-- Check the password, etc for validity -->
        <script>groovy:
            String password = (String) userLoginContext.get("currentPassword");
            String confirmPassword = (String) userLoginContext.get("currentPasswordVerify");
            String passwordHint = (String) userLoginContext.get("passwordHint");
            org.apache.ofbiz.common.login.LoginServices.checkNewPassword(newUserLogin, null, password, confirmPassword, passwordHint, error_list, true, locale);
        </script>

        <!-- Create the Person -->
        <call-map-processor in-map-name="parameters" out-map-name="personContext">
            <simple-map-processor name="newPerson">
                <process field="USER_FIRST_NAME">
                    <copy to-field="firstName"/>
                    <not-empty><fail-property resource="PartyUiLabels" property="PartyFirstNameMissing"/></not-empty>
                </process>
                <process field="USER_MIDDLE_NAME"><copy to-field="middleName"/></process>
                <process field="USER_LAST_NAME">
                    <copy to-field="lastName"/>
                    <not-empty><fail-property resource="PartyUiLabels" property="PartyLastNameMissingError"/></not-empty>
                </process>
                <process field="USER_TITLE"><copy to-field="personalTitle"/></process>
            </simple-map-processor>
        </call-map-processor>

        <log level="info" message="Creating new customer, newUserLogin=${newUserLogin}"/>

        <!-- Create the PartyRole -->
        <set from-field="parameters.roleTypeId" field="partyRoleContext.roleTypeId"/>

        <!-- Create the email address -->

        <!-- Check for required E-Mail -->
        <if-compare field="parameters.REQUIRE_EMAIL" operator="not-equals" value="false">
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="roleTypeId"><copy/></process>
                    <process field="CUSTOMER_EMAIL">
                        <copy to-field="emailAddress"/>
                        <not-empty><fail-property resource="PartyUiLabels" property="PartyEmailAddressMissingError"/></not-empty>
                        <validate-method method="isEmail"><fail-property resource="PartyUiLabels" property="PartyEmailAddressNotFormattedCorrectly"/></validate-method>
                    </process>
                    <process field="CUSTOMER_EMAIL_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
        <else>
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="roleTypeId"><copy/></process>
                    <process field="CUSTOMER_EMAIL">
                        <copy to-field="emailAddress"/>
                        <validate-method method="isEmail"><fail-property resource="PartyUiLabels" property="PartyEmailAddressNotFormattedCorrectly"/></validate-method>
                    </process>
                    <process field="CUSTOMER_EMAIL_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
        </else>
        </if-compare>

        <!-- create the PartyDataSource entry to track where this info came from... -->
        <make-value entity-name="PartyDataSource" value-field="partyDataSource"/>
        <set value="ECOMMERCE_SITE" field="partyDataSource.dataSourceId"/>
        <set from-field="nowStamp" field="partyDataSource.fromDate"/>
        <set value="Y" field="partyDataSource.isCreate"/>
        <!-- get the visit from the session to get the visitId -->
        <session-to-field field="visit"/>
        <set from-field="visit.visitId" field="partyDataSource.visitId"/>

        <!-- now that everything is validated & setup, check to see if there are errors, then call the services -->
        <check-errors/>

        <set-service-fields map="personContext" service-name="createPersonAndUserLogin" to-map="personUserLoginContext"/>
        <set-service-fields map="newUserLogin" service-name="createPersonAndUserLogin" to-map="personUserLoginContext"/>
        <set from-field="newUserLogin.currentPassword" field="personUserLoginContext.currentPasswordVerify"/>
        <!-- the above copy is okay since we checked already that they are the same -->
        <call-service service-name="createPersonAndUserLogin" in-map-name="personUserLoginContext">
            <result-to-field result-name="partyId" field="tempMap.partyId"/>
            <result-to-field result-name="newUserLogin" field="createdUserLogin"/>
        </call-service>
        <set-current-user-login value-field="createdUserLogin"/>

        <!-- now that we have the partyId, put it where it needs to go... -->
        <set from-field="tempMap.partyId" field="partyDataSource.partyId"/>
        <set from-field="tempMap.partyId" field="userLoginContext.partyId"/>
        <set from-field="tempMap.partyId" field="personContext.partyId"/>
        <set from-field="tempMap.partyId" field="partyRoleContext.partyId"/>
        <set from-field="tempMap.partyId" field="emailContext.partyId"/>

        <create-value value-field="partyDataSource"/>
        <call-service service-name="createPartyRole" in-map-name="partyRoleContext" include-user-login="true"/>

        <!-- email address -->
        <if-not-empty field="emailContext.emailAddress">
            <call-service service-name="createPartyEmailAddress" in-map-name="emailContext">
                <result-to-field result-name="contactMechId" field="emailPurposeContext.contactMechId"/>
            </call-service>
            <set from-field="tempMap.partyId" field="emailPurposeContext.partyId"/>
            <set value="PRIMARY_EMAIL" field="emailPurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="emailPurposeContext"/>
        </if-not-empty>

        <!-- now finished, log in the user and set the cart's partyId to that of the newly created customer ... -->
        <if-compare field="allowPassword" operator="equals" value="Y">
            <script>groovy:
                org.apache.ofbiz.webapp.control.LoginWorker.doBasicLogin(createdUserLogin, request);
                org.apache.ofbiz.webapp.control.LoginWorker.autoLoginSet(request, response);
                session = request.getSession();
                cart = session.getAttribute("shoppingCart");
                if (cart != null) {
                    cart.setOrderPartyId(tempMap.get("partyId"));
                }
            </script>
        </if-compare>

        <!-- Associated to Product Store -->
        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="createProductStoreRoleMap.userLogin" from-field="userLogin"/>
        <set field="createProductStoreRoleMap.partyId" from-field="tempMap.partyId"/>
        <set field="createProductStoreRoleMap.roleTypeId" from-field="parameters.roleTypeId"/>
        <set field="createProductStoreRoleMap.productStoreId" from-field="parameters.emailProductStoreId"/>
        <call-service service-name="createProductStoreRole" in-map-name="createProductStoreRoleMap"/>

        <!-- send off the registration email -->
        <if-not-empty field="emailContext.emailAddress">
            <set from-field="parameters.emailProductStoreId" field="storeEmailLookup.productStoreId"/>
            <set value="PRDS_CUST_REGISTER" field="storeEmailLookup.emailType"/>
            <find-by-primary-key map="storeEmailLookup" entity-name="ProductStoreEmailSetting"  value-field="storeEmail"/>
            <if-not-empty field="storeEmail.bodyScreenLocation">
                <get-related-one value-field="createdUserLogin" relation-name="Person" to-value-field="person"/>
                <set field="bodyParameters.person" from-field="person"/>
                <set field="bodyParameters.webSiteId" from-field="parameters.webSiteId"/>
                <set field="emailParams.bodyParameters" from-field="bodyParameters"/>
                <set field="emailParams.sendTo" from-field="emailContext.emailAddress"/>
                <set field="emailParams.subject" from-field="storeEmail.subject"/>
                <set field="emailParams.sendFrom" from-field="storeEmail.fromAddress"/>
                <set field="emailParams.sendCc" from-field="storeEmail.ccAddress"/>
                <set field="emailParams.sendBcc" from-field="storeEmail.bccAddress"/>
                <set field="emailParams.contentType" from-field="storeEmail.contentType"/>
                <set field="emailParams.bodyScreenUri" from-field="storeEmail.bodyScreenLocation"/>
                <set field="emailParams.emailType" from-field="storeEmailLookup.emailType"/>
                <call-service-asynch service-name="sendMailFromScreen" in-map-name="emailParams" include-user-login="true"/>
            </if-not-empty>
        </if-not-empty>

        <!-- security for manage profile  -->
        <set field="securityParams.userLoginId" from-field="createdUserLogin.userLoginId"/>
        <set field="securityParams.groupId" value="ECOMMERCE_CUSTOMER"/>
        <set field="securityParams.userLogin" from-field="userLogin"/>
        <call-service service-name="addUserLoginToSecurityGroup" in-map-name="securityParams"/>

        <!-- tell the control servlet that we just logged in the user... -->
        <set value="TRUE" field="_LOGIN_PASSED_"/>
        <field-to-request field="_LOGIN_PASSED_"/>
    </simple-method>
</simple-methods>
