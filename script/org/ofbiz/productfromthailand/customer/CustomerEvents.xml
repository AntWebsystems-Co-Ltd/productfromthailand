<?xml version="1.0" encoding="UTF-8" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    
    <simple-method method-name="createSupplier" short-description="create a customer profile [Supplier]" login-required="false">
        <!-- Process all map -->
        <call-map-processor xml-resource="component://party/script/org/ofbiz/party/contact/PartyContactMechMapProcs.xml"
        processor-name="emailAddress" in-map-name="parameters" out-map-name="emailAddressCtx"/>
        
        <call-map-processor in-map-name="parameters" out-map-name="shipToAddressCtx">
            <simple-map-processor name="shipToAddress">
                <process field="shipToContactMechId"><copy to-field="contactMechId" set-if-null="false"/></process>
                <process field="shipToName"><copy to-field="toName" set-if-null="false"/></process>
                <process field="shipToAttnName"><copy to-field="attnName" set-if-null="false"/></process>
                <process field="shipToAddress1">
                    <copy to-field="address1"/>
                    <not-empty>
                        <fail-property resource="PartyUiLabels" property="PartyAddressLine1MissingError"/>
                    </not-empty>
                </process>
                <process field="shipToAddress2"><copy to-field="address2"/></process>
                <process field="shipToCity">
                    <copy to-field="city"/>
                    <not-empty>
                        <fail-property resource="PartyUiLabels" property="PartyCityMissing"/>
                    </not-empty>
                </process>
                <process field="shipToStateProvinceGeoId"><copy to-field="stateProvinceGeoId"/></process>
                <process field="shipToPostalCode">
                    <copy to-field="postalCode"/>
                    <not-empty>
                        <fail-property resource="PartyUiLabels" property="PartyPostalInformationNotFound"/>
                    </not-empty>
                </process>
                <process field="shipToCountryGeoId">
                    <copy to-field="countryGeoId"/>
                    <not-empty>
                        <fail-property resource="PartyUiLabels" property="PartyCountryMissing"/>
                    </not-empty>
                </process>
            </simple-map-processor>
        </call-map-processor>
        <call-map-processor xml-resource="component://productfromthailand/script/org/ofbiz/productfromthailand/customer/CheckoutMapProcs.xml"
            processor-name="shipToPhone" in-map-name="parameters" out-map-name="shipToTelecomNumberCtx"/>
        <check-errors/>
        
        <set field="createPartyGroupCtx.groupName" from-field="parameters.groupName"/>
        <!-- create person -->
        <call-service service-name="createPartyGroup" in-map-name="createPartyGroupCtx">
            <result-to-field result-name="partyId" field="partyId"/>
        </call-service>
        <set field="parameters.partyId" from-field="partyId"/>
        
        <!-- create userLogin -->
        <call-simple-method method-name="createUpdateUserLogin" xml-resource="component://ecommerce/script/org/ofbiz/ecommerce/customer/CustomerEvents.xml"/>
        
        <!-- Create party role-->
        <set field="partyRoleContext.partyId" from-field="parameters.partyId"/>
        <set field="partyRoleContext.roleTypeId" from-field="parameters.roleTypeId"/>
        <set field="partyRoleContext.userLogin" from-field="parameters.userLogin"/>
        <call-service service-name="createPartyRole" in-map-name="partyRoleContext"/>
        
        <!-- Create email address -->
        <set field="emailAddressCtx.partyId" from-field="parameters.partyId"/>
        <set field="emailAddressCtx.userLogin" from-field="parameters.userLogin"/>
        <set field="emailAddressCtx.contactMechPurposeTypeId" from-field="parameters.emailContactMechPurposeTypeId"/>
        <call-service service-name="createPartyEmailAddress" in-map-name="emailAddressCtx">
            <result-to-field result-name="contactMechId" field="emailContactMechId"/>
        </call-service>
        <log level="info" message="Email Contact Created emailContactMechId is ${emailContactMechId}"/>
        <!-- Create shipping address -->
        <set field="shipToAddressCtx.partyId" from-field="parameters.partyId"/>
        <set field="shipToAddressCtx.userLogin" from-field="parameters.userLogin"/>
        <set field="shipToAddressCtx.setPaymentPurpose" value="Y"/>
        <set field="shipToAddressCtx.setGeneralPurpose" value="Y"/>
        <set field="shipToAddressCtx.productStoreId" from-field="parameters.productStoreId"/>
        <set field="shipToAddressCtx.setBillingPurpose" value="Y"/>
        <call-service service-name="createSupplierPostalAddressAndPurposes" in-map-name="shipToAddressCtx">
            <result-to-field result-name="contactMechId" field="billToContactMechId"/>
        </call-service>
        <log level="info" message="Billing address created with contactMechId ${billToContactMechId}"/>
        
        <!-- create billing telecom number  -->
        <set field="shipToTelecomNumberCtx.partyId" from-field="parameters.partyId"/>
        <set field="shipToTelecomNumberCtx.userLogin" from-field="parameters.userLogin"/>
        <set field="shipToTelecomNumberCtx.contactMechPurposeTypeId" value="PHONE_BILLING"/>
        <!-- call create telecom service -->
        <call-service service-name="createPartyTelecomNumber" in-map-name="shipToTelecomNumberCtx">
            <result-to-field result-name="contactMechId" field="parameters.shipToTelecomContactMechId"/>
        </call-service>
        <log level="info" message="Billing telecom number is created with contactMechId ${parameters.shipToTelecomContactMechId}"/>
       
        <!-- Add UserLogin To Security Group -->
        <make-value value-field="addUserToSecurityGroup" entity-name="UserLoginSecurityGroup"/>
        <set field="addUserToSecurityGroup.groupId" value="MYPORTAL_SUPPLIER"/>
        <set field="addUserToSecurityGroup.userLogin" from-field="parameters.userLogin"/>
        <set field="addUserToSecurityGroup.userLoginId" from-field="parameters.userLogin.userLoginId"/>
        <if-empty field="addUserToSecurityGroup.fromDate">
            <now-timestamp field="nowTimestamp"/>
            <set from-field="nowTimestamp" field="addUserToSecurityGroup.fromDate"/>
        </if-empty>
        <create-value value-field="addUserToSecurityGroup"/>
        
        <set-service-fields service-name="sendCreatePartyEmailNotification" map="emailAddressCtx" to-map="serviceInMap"/>
        <call-service-asynch service-name="sendCreatePartyEmailNotification" in-map-name="serviceInMap"/>
    </simple-method>
    
    <simple-method method-name="createSupplierPostalAddressAndPurposes" short-description="Create postal address, purposes and set them defaults" login-required="false">
        <call-service service-name="createPartyPostalAddress" in-map-name="parameters" >
            <result-to-field result-name="contactMechId" field="parameters.contactMechId"/>
            <result-to-result result-name="contactMechId"/>
        </call-service>
        <if>
            <condition>
                <or>
                    <not><if-empty field="parameters.setGeneralPurpose"/></not>
                    <not><if-empty field="parameters.setBillingPurpose"/></not>
                    <not><if-empty field="parameters.setPaymentPurpose"/></not>
                </or>
            </condition>
            <then>
                <set-service-fields service-name="createPartyContactMechPurpose" map="parameters" to-map="serviceContext"/>
                <set field="serviceContext.partyId" from-field="userLogin.partyId"/>
                <if-compare field="parameters.setGeneralPurpose" operator="equals" value="Y">
                    <entity-and entity-name="PartyContactMechPurpose" list="pcmpList" filter-by-date="true">
                        <field-map field-name="partyId" from-field="userLogin.partyId"/>
                        <field-map field-name="contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
                    </entity-and>
                    <if-not-empty field="pcmpList">
                        <first-from-list entry="pcmp" list="pcmpList"/>
                        <set-service-fields service-name="deletePartyContactMechPurposeIfExists" map="pcmp" to-map="serviceInMap"/>
                        <call-service service-name="deletePartyContactMechPurposeIfExists" in-map-name="serviceInMap"/>
                        <clear-field field="serviceInMap"/>
                    </if-not-empty>
                    <set field="serviceContext.contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="serviceContext"/>
                    
                    <set-service-fields service-name="setPartyProfileDefaults" map="parameters" to-map="partyProfileDefaultsCtx"/>
                    <set field="partyProfileDefaultsCtx.defaultShipAddr" from-field="parameters.contactMechId"/>
                    <set field="partyProfileDefaultsCtx.partyId" from-field="userLogin.partyId"/>
                    <call-service service-name="setPartyProfileDefaults" in-map-name="partyProfileDefaultsCtx"/>
                </if-compare>
                <if-compare field="parameters.setBillingPurpose" operator="equals" value="Y">
                    <entity-and entity-name="PartyContactMechPurpose" list="pcmpList" filter-by-date="true">
                        <field-map field-name="partyId" from-field="userLogin.partyId"/>
                        <field-map field-name="contactMechPurposeTypeId" value="BILLING_LOCATION"/>
                    </entity-and>
                    <if-not-empty field="pcmpList">
                        <first-from-list entry="pcmp" list="pcmpList"/>
                        <set-service-fields service-name="deletePartyContactMechPurposeIfExists" map="pcmp" to-map="serviceInMap"/>
                        <call-service service-name="deletePartyContactMechPurposeIfExists" in-map-name="serviceInMap"/>
                    </if-not-empty>
                    <set field="serviceContext.contactMechPurposeTypeId" value="BILLING_LOCATION"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="serviceContext"/>
                    
                    <set-service-fields service-name="setPartyProfileDefaults" map="parameters" to-map="partyProfileDefaultsCtx"/>
                    <set field="partyProfileDefaultsCtx.defaultBillAddr" from-field="parameters.contactMechId"/>
                    <set field="partyProfileDefaultsCtx.partyId" from-field="userLogin.partyId"/>
                    <call-service service-name="setPartyProfileDefaults" in-map-name="partyProfileDefaultsCtx"/>
                </if-compare>
                <if-compare field="parameters.setPaymentPurpose" operator="equals" value="Y">
                    <entity-and entity-name="PartyContactMechPurpose" list="pcmpList" filter-by-date="true">
                        <field-map field-name="partyId" from-field="userLogin.partyId"/>
                        <field-map field-name="contactMechPurposeTypeId" value="PAYMENT_LOCATION"/>
                    </entity-and>
                    <if-not-empty field="pcmpList">
                        <first-from-list entry="pcmp" list="pcmpList"/>
                        <set-service-fields service-name="deletePartyContactMechPurposeIfExists" map="pcmp" to-map="serviceInMap"/>
                        <call-service service-name="deletePartyContactMechPurposeIfExists" in-map-name="serviceInMap"/>
                    </if-not-empty>
                    <set field="serviceContext.contactMechPurposeTypeId" value="PAYMENT_LOCATION"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="serviceContext"/>
                    
                    <set-service-fields service-name="setPartyProfileDefaults" map="parameters" to-map="partyProfileDefaultsCtx"/>
                    <set field="partyProfileDefaultsCtx.defaultBillAddr" from-field="parameters.contactMechId"/>
                    <set field="partyProfileDefaultsCtx.partyId" from-field="userLogin.partyId"/>
                    <call-service service-name="setPartyProfileDefaults" in-map-name="partyProfileDefaultsCtx"/>
                </if-compare>
            </then>
        </if>
    </simple-method>
</simple-methods>
