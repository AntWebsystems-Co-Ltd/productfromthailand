Index: applications/order/src/org/ofbiz/order/order/OrderServices.java
===================================================================
--- applications/order/src/org/ofbiz/order/order/OrderServices.java	(revision 885358)
+++ applications/order/src/org/ofbiz/order/order/OrderServices.java	(working copy)
@@ -4563,7 +4563,67 @@
                             CheckOutHelper coh = new CheckOutHelper(dispatcher, delegator, cart);
                             Map resultOrderMap = coh.createOrder(userLogin);
                             String purchaseOrderId = (String)resultOrderMap.get("orderId");
+                            
+                            Locale locale = (Locale) context.get("locale");
+                            
+                            // get the email setting for this email type
+                            GenericValue productStoreEmail = null;
+                            String emailType = "PRCHS_ODR_CONFIRM";
+                            try {
+                                productStoreEmail = delegator.findByPrimaryKey("ProductStoreEmailSetting", UtilMisc.toMap("productStoreId","PFTSTORE", "emailType", emailType));
+                            } catch (GenericEntityException e) {
+                                Debug.logError(e, "Unable to get product store email setting for order confirm", module);
+                            }
+                            if (productStoreEmail == null) {
+                                Debug.logError("No order confirm email setting found for this store; cannot send order information", module);
+                            } else {
+                                ResourceBundleMapWrapper uiLabelMap = (ResourceBundleMapWrapper) UtilProperties.getResourceBundleMap("EcommerceUiLabels", locale);
 
+                                Map emailCtx = new HashMap();
+                                String bodyScreenLocation = productStoreEmail.getString("bodyScreenLocation");
+                             
+                                // get the email of the supplier
+                                String sendToEmail = null;
+                                GenericValue fromCm;
+                                try {
+                                    List<GenericValue> fromCms = delegator.findByAnd("PartyAndContactMech", UtilMisc.toMap("partyId", supplierPartyId,"contactMechTypeId","EMAIL_ADDRESS"), UtilMisc.toList("-fromDate"));
+                                    fromCms = EntityUtil.filterByDate(fromCms);
+                                    fromCm = EntityUtil.getFirst(fromCms);
+                                } catch (GenericEntityException e) {
+                                    Debug.logError(e, module);
+                                    return ServiceUtil.returnError(e.getMessage());
+                                }
+                                if (fromCm != null) {
+                                    sendToEmail = fromCm.getString("infoString");
+                                }
+                                if (UtilValidate.isEmpty(bodyScreenLocation)) {
+                                    bodyScreenLocation = ProductStoreWorker.getDefaultProductStoreEmailScreenLocation(emailType);
+                                }
+                                
+                                Map bodyParameters = UtilMisc.toMap("orderId", purchaseOrderId,"partyId",supplierPartyId,"uiLabelMap", uiLabelMap, "locale", locale);
+                                String sendBcc = null;
+                                emailCtx.put("bodyScreenUri", bodyScreenLocation);
+                                emailCtx.put("bodyParameters", bodyParameters);
+                                emailCtx.put("sendTo", sendToEmail);
+                                emailCtx.put("contentType", productStoreEmail.get("contentType"));
+                                emailCtx.put("sendFrom", productStoreEmail.get("fromAddress"));
+                                emailCtx.put("sendCc", productStoreEmail.get("ccAddress"));
+                                emailCtx.put("sendBcc", productStoreEmail.get("bccAddress"));
+                                emailCtx.put("emailType", emailType);
+                                emailCtx.put("subject", productStoreEmail.getString("subject"));
+                                // send off the email async so we will retry on failed attempts
+                                // SC 20060405: Changed to runSync because runAsync kept getting an error:
+                                // Problem serializing service attributes (Cannot serialize object of class java.util.PropertyResourceBundle)
+                                try {
+                                    dispatcher.runSync("sendMailFromScreen", emailCtx);
+                                } catch (GenericServiceException e) {
+                                    Debug.logError(e, "Problem sending mail", module);
+                                    // this is fatal; we will rollback and try again later
+                                    return ServiceUtil.returnError("Error sending Order Confirm notice email: " + e.toString());
+                                }
+                                }
+
+
                             // TODO: associate the new purchase order with the sales order (ship group)
                         } else {
                             // if there are no items to drop ship, then clear out the supplier partyId
