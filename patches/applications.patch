Index: applications/product/config/ProductUiLabels.xml
===================================================================
--- applications/product/config/ProductUiLabels.xml	(revision 1156566)
+++ applications/product/config/ProductUiLabels.xml	(working copy)
@@ -23723,6 +23723,10 @@
         <value xml:lang="zh">应征税的</value>
         <value xml:lang="zh_TW">應征稅的</value>
     </property>
+    <property key="ProductTellAFriendConfirmMessage">
+        <value xml:lang="en">Your message has been sent to ${sendTo} successfully.</value>
+        <value xml:lang="th">ข้อความของคุณได้ส่งถึง ${sendTo} แล้ว.</value>
+    </property>
     <property key="ProductTemplatePath">
         <value xml:lang="de">Template Pfad</value>
         <value xml:lang="en">Template Path</value>
Index: applications/product/config/catalog.properties
===================================================================
--- applications/product/config/catalog.properties	(revision 1156566)
+++ applications/product/config/catalog.properties	(working copy)
@@ -29,8 +29,8 @@
 image.filename.additionalviewsize.format=${location}/${id}/${viewtype}/${sizetype}
 
 # -- Which default top category to display... --
-top.category.default=CATALOG1
-all.product.category=CATALOG1
+top.category.default=PFT_ROOT
+all.product.category=PFT_ROOT
 
 # Flag to re-active products when they are received
 reactivate.product.from.receipt=Y
Index: applications/product/src/org/ofbiz/product/product/ProductEvents.java
===================================================================
--- applications/product/src/org/ofbiz/product/product/ProductEvents.java	(revision 1156566)
+++ applications/product/src/org/ofbiz/product/product/ProductEvents.java	(working copy)
@@ -22,6 +22,7 @@
 import java.sql.Timestamp;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
@@ -987,7 +988,8 @@
         Delegator delegator = (Delegator) request.getAttribute("delegator");
         String emailType = "PRDS_TELL_FRIEND";
         String defaultScreenLocation = "component://ecommerce/widget/EmailProductScreens.xml#TellFriend";
-
+        Locale locale = UtilHttp.getLocale(request);
+        
         GenericValue productStore = ProductStoreWorker.getProductStore(request);
         if (productStore == null) {
             String errMsg = "Could not send tell a friend email, no ProductStore found";
@@ -1039,6 +1041,7 @@
             request.setAttribute("_ERROR_MESSAGE_", errMsg);
             return "error";
         }
+        request.setAttribute("_EVENT_MESSAGE_", UtilProperties.getMessage("ProductUiLabels", "ProductTellAFriendConfirmMessage",UtilMisc.toMap("sendTo",paramMap.get("sendTo")), locale));
         return "success";
     }
 
Index: applications/accounting/widget/InvoiceScreens.xml
===================================================================
--- applications/accounting/widget/InvoiceScreens.xml	(revision 1156566)
+++ applications/accounting/widget/InvoiceScreens.xml	(working copy)
@@ -579,6 +579,7 @@
                         <condition-expr field-name="partyIdFrom" operator="equals" from-field="myCompanyId"/>
                         <condition-expr field-name="invoiceTypeId" operator="equals" value="PURCHASE_INVOICE"/>
                         <condition-list combine="or">
+                            <condition-expr field-name="statusId" operator="equals" value="INVOICE_IN_PROCESS"/>
                             <condition-expr field-name="statusId" operator="equals" value="INVOICE_APPROVED"/>
                             <condition-expr field-name="statusId" operator="equals" value="INVOICE_SENT"/>
                             <condition-expr field-name="statusId" operator="equals" value="INVOICE_READY"/>
Index: applications/order/config/OrderUiLabels.xml
===================================================================
--- applications/order/config/OrderUiLabels.xml	(revision 1156566)
+++ applications/order/config/OrderUiLabels.xml	(working copy)
@@ -1466,6 +1466,10 @@
         <value xml:lang="zh_CN">添加代码</value>
         <value xml:lang="zh_TW">增加促銷碼</value>
     </property>
+    <property key="OrderAddedProductToCart">
+        <value xml:lang="en">Product ${productId} has been added to your cart.</value>
+        <value xml:lang="th">สินค้า ${productId} ได้เพิ่มเข้าในตระกร้าของคุณแล้ว.</value>
+    </property>
     <property key="OrderAddGiftCertificate">
         <value xml:lang="en">Add Gift Certificate</value>
         <value xml:lang="fr">Ajouter carte cadeau</value>
Index: applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartItem.java
===================================================================
--- applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartItem.java	(revision 1156566)
+++ applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartItem.java	(working copy)
@@ -259,7 +259,38 @@
         if (supplierProduct != null) {
             newItem.setSupplierProductId(supplierProduct.getString("supplierProductId"));
             newItem.setName(getPurchaseOrderItemDescription(product, supplierProduct, cart.getLocale()));
-            newItem.setBasePrice(supplierProduct.getBigDecimal("lastPrice"));
+            //  newItem.setBasePrice(supplierProduct.getBigDecimal("lastPrice"));
+            Map priceContext = FastMap.newInstance();
+            priceContext.put("currencyUomId", cart.getCurrency());
+
+            String partyId = cart.getPartyId();
+            if (partyId != null) {
+                priceContext.put("partyId", partyId);
+            }
+            priceContext.put("product", product);
+            priceContext.put("webSiteId", cart.getWebSiteId());
+            priceContext.put("productStoreId", cart.getProductStoreId());
+            priceContext.put("agreementId", cart.getAgreementId());
+            priceContext.put("productPricePurposeId", "PURCHASE");
+            priceContext.put("checkIncludeVat", "Y");
+
+            try {
+                Map priceResult = dispatcher.runSync("calculateProductPrice", priceContext);
+                if (ServiceUtil.isError(priceResult)) {
+                    throw new CartItemModifyException("There was an error while calculating the price: " + ServiceUtil.getErrorMessage(priceResult));
+                }
+
+                Boolean validPriceFound = (Boolean) priceResult.get("validPriceFound");
+                if (Boolean.FALSE.equals(validPriceFound)) {
+                    throw new CartItemModifyException("Could not find a valid price for the product with ID [" + product.get("productId") + "], not adding to cart.");
+                }
+
+                if (priceResult.get("basePrice") != null) {
+                    newItem.setBasePrice(((BigDecimal) priceResult.get("basePrice")));
+                }
+            }catch (GenericServiceException e) {
+                Debug.logError(e, "Unable to get product price from product : " + product.get("productId"), module);
+            }
         } else {
             newItem.setName(product.getString("internalName"));
         }
Index: applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java
===================================================================
--- applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java	(revision 1156566)
+++ applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java	(working copy)
@@ -596,6 +596,7 @@
             if (cart.viewCartOnAdd()) {
                 return "viewcart";
             } else {
+                request.setAttribute("_EVENT_MESSAGE_", UtilProperties.getMessage(resource, "OrderAddedProductToCart",UtilMisc.toMap("productId",productId), locale));
                 return "success";
             }
         }
Index: applications/order/src/org/ofbiz/order/order/OrderServices.java
===================================================================
--- applications/order/src/org/ofbiz/order/order/OrderServices.java	(revision 1156566)
+++ applications/order/src/org/ofbiz/order/order/OrderServices.java	(working copy)
@@ -21,6 +21,7 @@
 import java.math.BigDecimal;
 import java.sql.Timestamp;
 import java.util.ArrayList;
+import java.util.Calendar;
 import java.util.Collection;
 import java.util.Date;
 import java.util.HashMap;
@@ -35,10 +36,6 @@
 
 import javax.transaction.Transaction;
 
-import javolution.util.FastList;
-import javolution.util.FastMap;
-import javolution.util.FastSet;
-
 import org.ofbiz.base.util.Debug;
 import org.ofbiz.base.util.GeneralException;
 import org.ofbiz.base.util.GeneralRuntimeException;
@@ -49,6 +46,7 @@
 import org.ofbiz.base.util.UtilNumber;
 import org.ofbiz.base.util.UtilProperties;
 import org.ofbiz.base.util.UtilValidate;
+import org.ofbiz.base.util.collections.ResourceBundleMapWrapper;
 import org.ofbiz.common.DataModelConstants;
 import org.ofbiz.entity.Delegator;
 import org.ofbiz.entity.GenericEntity;
@@ -83,8 +81,6 @@
 import org.ofbiz.service.ModelService;
 import org.ofbiz.service.ServiceUtil;
 
-import com.ibm.icu.util.Calendar;
-
 /**
  * Order Processing Services
  */
@@ -4822,8 +4818,92 @@
                             cart.setShippingContactMechId(shipGroup.getString("contactMechId"));
                             // create the order
                             CheckOutHelper coh = new CheckOutHelper(dispatcher, delegator, cart);
+                            
+                            Map resultOrderMap = coh.createOrder(userLogin);
+                            String purchaseOrderId = (String)resultOrderMap.get("orderId");
+                            
+                            Locale locale = (Locale) context.get("locale");
+                            
+                            // get the email setting for this email type
+                            GenericValue productStoreEmail = null;
+                            String emailType = "PRCHS_ODR_CONFIRM";
+                            try {
+                                productStoreEmail = delegator.findByPrimaryKey("ProductStoreEmailSetting", UtilMisc.toMap("productStoreId","PFTSTORE", "emailType", emailType));
+                            } catch (GenericEntityException e) {
+                                Debug.logError(e, "Unable to get product store email setting for order confirm", module);
+                            }
+                            if (productStoreEmail == null) {
+                                Debug.logError("No order confirm email setting found for this store; cannot send order information", module);
+                            } else {
+                                ResourceBundleMapWrapper uiLabelMap = (ResourceBundleMapWrapper) UtilProperties.getResourceBundleMap("EcommerceUiLabels", locale);
+                             
+                                Map emailCtx = new HashMap();
+                                String bodyScreenLocation = productStoreEmail.getString("bodyScreenLocation");
+                             
+                                // get the email of the supplier
+                                String sendToEmail = null;
+                                GenericValue fromCm;
+                                try {
+                                    List<GenericValue> fromCms = delegator.findByAnd("PartyAndContactMech", UtilMisc.toMap("partyId", supplierPartyId,"contactMechTypeId","EMAIL_ADDRESS"), UtilMisc.toList("-fromDate"));
+                                    fromCms = EntityUtil.filterByDate(fromCms);
+                                    fromCm = EntityUtil.getFirst(fromCms);
+                                } catch (GenericEntityException e) {
+                                    Debug.logError(e, module);
+                                    return ServiceUtil.returnError(e.getMessage());
+                                }
+                                if (fromCm != null) {
+                                    sendToEmail = fromCm.getString("infoString");
+                                }
+                                if (UtilValidate.isEmpty(bodyScreenLocation)) {
+                                    bodyScreenLocation = ProductStoreWorker.getDefaultProductStoreEmailScreenLocation(emailType);
+                                }
+                                
+                                Map bodyParameters = UtilMisc.toMap("orderId", purchaseOrderId,"partyId",supplierPartyId,"uiLabelMap", uiLabelMap, "locale", locale);
+                                String sendBcc = null;
+                                emailCtx.put("bodyScreenUri", bodyScreenLocation);
+                                emailCtx.put("bodyParameters", bodyParameters);
+                                emailCtx.put("sendTo", sendToEmail);
+                                emailCtx.put("contentType", productStoreEmail.get("contentType"));
+                                emailCtx.put("sendFrom", productStoreEmail.get("fromAddress"));
+                                emailCtx.put("sendCc", productStoreEmail.get("ccAddress"));
+                                emailCtx.put("sendBcc", productStoreEmail.get("bccAddress"));
+                                emailCtx.put("emailType", emailType);
+                                emailCtx.put("subject", productStoreEmail.getString("subject"));
+                                // send off the email async so we will retry on failed attempts
+                                // SC 20060405: Changed to runSync because runAsync kept getting an error:
+                                // Problem serializing service attributes (Cannot serialize object of class java.util.PropertyResourceBundle)
+                                try {
+                                    dispatcher.runSync("sendMailFromScreen", emailCtx);
+                                } catch (GenericServiceException e) {
+                                    Debug.logError(e, "Problem sending mail", module);
+                                    // this is fatal; we will rollback and try again later
+                                    return ServiceUtil.returnError("Error sending Order Confirm notice email: " + e.toString());
+                                }
+                            }
                             coh.createOrder(userLogin);
                             
+                            // create OrderAdjustment for service charge 7% of grand total
+                            OrderReadHelper orderReadHelper = new OrderReadHelper(delegator, purchaseOrderId);
+                            BigDecimal grandTotal = orderReadHelper.getOrderGrandTotal();
+                            BigDecimal surcharge = grandTotal.multiply(new BigDecimal("7")).divide(new BigDecimal("100"), orderDecimals, orderRounding);
+
+                            if (grandTotal.compareTo(new BigDecimal("0")) != 0) {
+                                Map<String, Object> createOrderAdjustmentContext = FastMap.newInstance();
+                                createOrderAdjustmentContext.put("orderId", purchaseOrderId);
+                                createOrderAdjustmentContext.put("orderAdjustmentTypeId", "SURCHARGE_ADJUSTMENT");
+                                createOrderAdjustmentContext.put("description", "Surcharge 7% for Order #" + purchaseOrderId);
+                                createOrderAdjustmentContext.put("amount", surcharge.negate());
+                                createOrderAdjustmentContext.put("userLogin", userLogin);
+                                String shippingOrderAdjustmentId = null;
+                                try {
+                                    Map<String, Object> createOrderAdjustmentResult = dispatcher.runSync("createOrderAdjustment", createOrderAdjustmentContext);
+                                    shippingOrderAdjustmentId = (String) createOrderAdjustmentResult.get("orderAdjustmentId");
+                                } catch (GenericServiceException e) {
+                                    String errMsg = "Trouble calling createOrderAdjustment service";
+                                    Debug.logError(e, errMsg, module);
+                                    return ServiceUtil.returnError(errMsg);
+                                }
+                            }
                             // TODO: associate the new purchase order with the sales order (ship group)
                         } else {
                             // if there are no items to drop ship, then clear out the supplier partyId
Index: applications/order/webapp/ordermgr/order/orderReportConditions.fo.ftl
===================================================================
--- applications/order/webapp/ordermgr/order/orderReportConditions.fo.ftl	(revision 1156566)
+++ applications/order/webapp/ordermgr/order/orderReportConditions.fo.ftl	(working copy)
@@ -51,7 +51,7 @@
 
 <fo:block space-after="40pt"/>
 <#if orderHeader.getString("orderTypeId") == "SALES_ORDER">
-  <fo:block font-size="14pt" font-weight="bold" text-align="center">THANK YOU FOR YOUR PATRONAGE!</fo:block>
+  <#--fo:block font-size="14pt" font-weight="bold" text-align="center">THANK YOU FOR YOUR PATRONAGE!</fo:block-->
   <fo:block font-size="8pt">
     <#--    Here is a good place to put policies and return information. -->
   </fo:block>
